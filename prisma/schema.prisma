// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  userId    String?    @unique
  name      String
  email     String     @db.String
  order     Order[]
  task      Task[]
  role      MemberRole @default(GUEST)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

enum MemberRole {
  ADMIN
  GUEST
}

model Client {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String   @unique
  phone     String
  address   String
  contact1  String
  contact2  String
  orders    Order[]
  task      Task[]
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
}

model Product {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  productName String
  country     String
  language    String
  price       String
  products    Order[]
  createdAt   DateTime @default(now())
  updateAt    DateTime @updatedAt
}

model Order {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  dob         DateTime @default(now())
  requiredby  DateTime @default(now())
  priority    String
  companyName String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String   @db.ObjectId
  client      Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId    String   @db.ObjectId
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  task        Task[]
  productId   String   @db.ObjectId
  createdAt   DateTime @default(now())
  updateAt    DateTime @updatedAt

  @@index([clientId])
  @@index([productId])
  @@index([userId])
}

model Task {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  taskName   String
  progress   Progress @default(Pending)
  requiredBy DateTime
  orderId    String   @db.ObjectId
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  userId     String   @db.ObjectId
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  clientId   String   @db.ObjectId
  client     Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

enum Progress {
  Pending
  InProgress
  Complete
}

model Report {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  report    Json
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
}
